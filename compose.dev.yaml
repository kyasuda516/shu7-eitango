# dev

version: "3"

services:
  ap:
    image: sh7e-ap:dev
    build: 
      target: dev
      # tags: ["sh7e-ap:dev"]   # image要素があるので不要 (imageで設定している名前で書き出される)。
    environment:
      DEBUG_MODE: 1
    env_file:
      - ./envs/mysql.dev.env
      - ./envs/redis.dev.env
    volumes:
      - ./services/ap/app/static/:/app/static/:ro
      - ./services/ap/app/templates/:/app/templates/:ro
      - ./services/ap/app/mymodule.py:/app/mymodule.py:ro
      - ./services/ap/app/run.py:/app/run.py:ro
      - ./services/ap/app/uwsgi.ini:/app/uwsgi.ini:ro
  
  cache:
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    env_file:
      - ./envs/redis.dev.env
  
  db:
    image: sh7e-db:dev
    build:
      target: dev
    env_file:
      - ./envs/mysql.dev.env
    volumes:
      - ./services/db/initialize.sh:/docker-entrypoint-initdb.d/initialize.sh
      - ./services/db/mysql-files/:/var/lib/mysql-files/
  
  web:
    image: sh7e-web:dev
    build:
      target: dev
    # # stg, prodではfork爆弾等への対策としてプロセス数を制限すべく以下を追加。
    # deploy:
    #   resources:
    #     limits:
    #       pids: 20
    volumes:
      - ./services/web/nginx.conf:/etc/nginx/nginx.conf
      - ./services/web/default.dev.conf:/etc/nginx/conf.d/default.conf
      - ./services/web/ssl_certs_temp/:/etc/ssl/certs/nginx/
  
  # # さまざまな用途にdebianを。
  # debian:
  #   image: debian:latest
  #   profiles:
  #     - "extra"
  #   volumes:
  #     - geoip_db:/usr/share/GeoIP
  # # 起動方法： $ docker compose -f compose.yaml -f compose.dev.yaml run debian bash
  # # たとえば、nginx.confのgeoip2ロケーションにおけるデータのパスを調べたければ、
  # # 次のようにmmdblookup toolを利用する。https://github.com/leev/ngx_http_geoip2_module#geoip
  # # $ apt update && apt install -y mmdb-bin
  # # $ mmdblookup --file /usr/share/GeoIP/GeoLite2-City.mmdb --ip 8.8.8.8

  grafana:
    image: sh7e-grafana:dev
    build:
      target: dev
    env_file:
      - ./envs/grafana.dev.env
    volumes:
      - ./services/grafana/grafana.dev.ini:/etc/grafana/grafana.ini

  loki:
    image: sh7e-loki:dev
    build:
      target: dev
    volumes:
      - ./services/loki/config.yaml:/etc/loki/myconfig.yaml
    # networks:
    #   - fluentd_loki

  promtail:
    image: sh7e-promtail:dev
    build:
      target: dev
    environment:
      TZ: "Asia/Tokyo"
    ports:
      - 9080:9080     # 送られていることを確認するために
    volumes:
      - ./services/promtail/config.yaml:/etc/promtail/myconfig.yaml

  # fluentd:
  #   # image: fluent/fluentd:edge
  #   build: 
  #     context: ./services/fluentd/
  #     dockerfile: ./Dockerfile.dev
  #   environment:
  #     FLUENT_CONF: /services/fluentd/etc/fluent.conf
  #   volumes:
  #     - ./services/fluentd/fluent.conf:/fluentd/etc/fluent.conf
  #     - ./services/fluentd/plugin:/etc/fluent/plugin
  #     - nginx_logs:/var/log/nginx/
  #   networks:
  #     - fluentd_loki

volumes:
  mysql_data:
    external: true    # この行をcompose.yamlに移すとエラーになる。
    # dev と stgおよびprod とではmysqlのパスワードが違うため別のボリュームにする必要がある。
    name: sh7e_mysql_data_dev
  grafana_data:
    external: true
    # dev と stgおよびprod とでは認証情報が違うため別のボリュームにする必要がある。
    name: sh7e_grafana_data_dev

# networks:
# #   fluentd_loki:
# #     driver: bridge
#   grafana_web:
#     driver: bridge